pipeline {
    agent any
    
    tools {nodejs "nodeHD"}
    
    environment {
        // Set the node version environment variable
        NODE_VERSION = '20.14.0'
        
    }

    stages {
        //stage('Prepare') {
            // steps {
                // script {
                    // Sourcing nvm and using a specific Node version
                   // sh 'source /home/jenkins/.nvm/nvm.sh && nvm install $NODE_VERSION && nvm use $NODE_VERSION'
               //  }
            // }
       //  }

        stage('Build') {
            steps {
                script {
                    env.PATH = "/usr/local/bin:${env.PATH}"
                    sh 'echo $PATH'
                    sh 'docker build -t 82 .'
                    // Installing dependencies
                    sh 'npm install'

                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run automated tests
                    sh 'npm test -- --exit'
                }
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                   sh 'npm run lint'
            
        }
    }
}


        stage('Deploy') {
            steps {
                script {
                    // Start the containers using Docker Compose
                    sh 'docker-compose up -d'
                    
                    // Finally, stop the containers after tests are done
                    sh 'docker-compose down'
                }
            }
        }
        stage('Release') {
            steps {
                script {
                    // Config Git
                    sh 'git config user.email "andv2013@gmail.com"'
                    sh 'git config user.name "VanAnDuong"'

                    // Switch to gh-pages
                    sh 'git checkout gh-pages'

                    
                    // 
                    withCredentials([string(credentialsId: "${env.GITHUB_CREDENTIALS_ID}", variable: 'GITHUB_TOKEN')]) {
                        sh 'git commit -m "Release to GitHub Pages"'
                        sh 'git push --force origin gh-pages'
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace after the pipeline runs
            cleanWs()
        }
    }
}
