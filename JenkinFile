pipeline {
    agent any
    
    tools {nodejs "nodeHD"} // NodeJs installations
    
    environment {
        // Set the node version environment variable
        NODE_VERSION = '20.14.0'
        GITHUB_CREDENTIALS_ID = '57ed8bd7-2879-442d-9598-d6a1faedc46e' // My credentials ID of Github in Jenkins
    }

    stages {

        stage('Build') {
            steps {
                script {
                    env.PATH = "/usr/local/bin:${env.PATH}"
                    sh 'echo $PATH'
                    sh 'docker build -t 82 .' // Build Docker image 
                    // Installing dependencies
                    sh 'npm install' // Install dependencies of the project 

                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run automated tests
                    sh 'npm test -- --exit' // Run automated test for project (must include exit for Jenkins exits after testing)
                }
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                   sh 'npm run lint' // Run code quality analysis for the project 
            
        }
    }
}


        stage('Deploy') {
            steps {
                script {
                    sh 'docker-compose up -d' // Start the containers using Docker Compose
                    sh 'docker-compose down' // Finally, stop the containers after tests are done
                }
            }
        }
        stage('Release project to Github') {
            steps {
                script {
                    // Config Git with my name and user name
                    sh 'git config user.email "andv2013@gmail.com"'
                    sh 'git config user.name "VanAnDuong"'
                    sh 'git checkout main' // Make sure it is in main branch

                    // Check if anything changes 
                    def hasChanges = sh(script: "git status --porcelain", returnStdout: true).trim()
                    if (hasChanges) {
                       withCredentials([string(credentialsId: "${env.GITHUB_CREDENTIALS_ID}", variable: 'GITHUB_TOKEN')]) {
                       sh 'git add --all'
                       sh 'git commit -m "Release to GitHub Pages"'
                       sh 'git push'
                    }
                    } else {
                       echo "No changes to commit."
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace after the pipeline runs
            cleanWs()
        }
    }
}
